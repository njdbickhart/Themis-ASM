rule bwa_index:
    input:
        "fastas/{asm}.fa"
    output:
        "fastas/{asm}.fa.amb",
        "fastas/{asm}.fa.ann",
        "fastas/{asm}.fa.bwt",
        "fastas/{asm}.fa.pac",
        "fastas/{asm}.fa.sa",
        "fastas/{asm}.fa.fai"
    log:
        "logs/{asm}/{asm}.indexing.log"
    conda:
        "../envs/base.yaml"
    shell:
        """
        bwa index {input} 2> {log}
        samtools faidx {input} 2> {log}
        """

rule align_reads:
    input:
        fq1 = lambda wildcards: config["samples"][wildcards.sample][0],
        fq2 = lambda wildcards: config["samples"][wildcards.sample][1],
        fasta = "fastas/{asm}.fa",
        amb = "fastas/{asm}.fa.amb",
        ann = "fastas/{asm}.fa.ann",
        bwt = "fastas/{asm}.fa.bwt",
        pac = "fastas/{asm}.fa.pac",
        sa = "fastas/{asm}.fa.sa",
        fai = "fastas/{asm}.fa.fai"
    output:
        temp("mapped/{asm}/{sample}.bam")
    log:
        "logs/{asm}/{sample}_bwa.log"
    threads: 8
    conda:
        "../envs/base.yaml"
    shell:
        """
        bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tPL:ILLUMINA' -t {threads} -M {input.fasta} {input.fq1} {input.fq2} | samtools sort -o {output}  - >> {log} 2>&1
        samtools index {output}
        """

rule merge_bams:
    input:
        expand("mapped/{{asm}}/{sample}.bam", sample=config["samples"])
    output:
        "mapped/{asm}/merged.bam",
        "mapped/{asm}/merged.bam.bai"
    threads: 8
    conda:
        "../envs/base.yaml"
    shell:
        """
        samtools merge -@ {threads} {output[0]} {input}
        samtools index {output[0]}
        """


rule freebayes:
    input:
        ref=lambda wildcards: config["assembly"][wildcards.asm],
        samples="mapped/{asm}/merged.bam",
        indexes="mapped/{asm}/merged.bam.bai"
    output:
        "calls/{asm}/merged_freebayes.vcf"
    log:
        "logs/{asm}/freebayes.log"
    conda:
        "../envs/freebayes.yaml"
    params:
        extra="-C 2 -0 -O -q 20 -z 0.10 -E 0 -X -u -p 2 -F 0.75",
        chunksize=1000000
    threads: 10
    script:
        "../scripts/freebayes_lift.py"



rule frc_align:
    input:
        ref=lambda wildcards: config["assembly"][wildcards.asm],
        samples="mapped/{asm}/merged.bam"
    output:
        features="calls/{asm}/merged_frc.txt_Features.txt",
        frc="calls/{asm}/merged_frc.txt_FRC.txt"
    params:
        outprefix="calls/{asm}/merged_frc.txt"
    shell:
        """
        module load frc_align
        FRC --pe-sam {input.samples} --output {params.outprefix}
        """

rule lumpy:
    input:
        samples="mapped/{asm}/merged.bam"
    output:
        "calls/{asm}/merged_lumpy.vcf"
    conda:
        "../envs/lumpy.yaml"
    log:
        "logs/{asm}/lumpy.log"
    shell:
        """
        lumpyexpress -B {input.samples} -o {output} -v 2> {log}
        """

rule samtools_depth:
    input:
        samples="mapped/{asm}/merged.bam"
    output:
        samdepth="calls/{asm}/merged_depth.txt"
    conda:
        "../envs/depth.yaml"
    params:
        threshold = 3
    script:
        "../scripts/depth_estimate.py"

rule qv_estimate:
    input:
        vcf="calls/{asm}/merged_freebayes.vcf",
        depth="calls/{asm}/merged_depth.txt"
    output:
        "calls/{asm}/{asm}.qv_value.txt"
    shell:
        """
        bash {workflow.basedir}/scripts/qv_estimate.sh {input.depth} {input.vcf} {output[0]}
        """
