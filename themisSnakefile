import os
import subprocess as sp
import itertools
from subprocess import PIPE, STDOUT
import pysam

shell.executable("/usr/bin/bash")

configfile : "default.json"

wildcard_constraints:
    lane = "(1|2)"

localrules: organize, move_kplots, package_for_distrib

os.makedirs("fastas", exist_ok=True)
os.makedirs("logs", exist_ok=True)
os.makedirs("mapped", exist_ok=True)

include: "rules/sequence_stats.snk"
include: "rules/asm_stats.snk"
include: "rules/kmer_comp.snk"
include: "rules/comp_align.snk"

finalSummary = ["final/summary_table.tab"]
pcombis = []
if len(config["assembly"].keys()) > 1:
    finalSummary.extend(["final/combined_frc_plot.png", "final/combined_ngx_plot.png"])
    # Adding iterations of dotplots
    pcombis = [c[0] + "_" + c[1] for c in list(itertools.combinations(config["assembly"].keys(), 2))]
    finalSummary.extend(expand("final/{C}/plot{C}.png", C=pcombis))
    finalSummary.extend(expand("final/{C}/vars{C}.log_all_sizes.png", C=pcombis))
    finalSummary.append("themis_summary.zip")

rule all:
    input:
        finalSummary,
        expand("final/ideogram_errors.{asm}.png", asm = config["assembly"].keys()),
        expand("final/ideogram_upperq_error_windows.{asm}.bed", asm = config["assembly"].keys()),
        expand("final/{asm}.spectra-asm.st.png", asm = config["assembly"].keys())


rule organize:
    input:
        lambda wildcards: config["assembly"][wildcards.asm]
    output:
        temp("fastas/{asm}.fa")
    run:
        cmd = ["ln", "-s", input[0], output[0]]
        print(cmd)
        sp.call(cmd)

def getAssemblyList(wildcards):
    return [v for k, v in config["assembly"].items()]
